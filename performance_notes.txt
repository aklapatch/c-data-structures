Adding quadratic probes to values searching really sped things up.
I may add a version of cuckoo hashing next (hash the hash to find the 
next slot). (done, not much better than quadratic probing IIRC)
Searching for values still takes a lot of time. (Fixed)
Changing to a version of cuckoo hash makes lookups take longer.
Tried splitting the table into 2 partitions, so that you are looking in
a different section of memory when you find a collision, but that slowed
things down
The hash and hash again probing is much faster than quadratic probing
for insertions From what I can tell. For queries quadratic seems to be a little
better
Tried pre-computing the hashes needed for probing and that made things
slower queries got 100% slower. also, STBs default hash function is
faster than ahash's fallback funcion by a lot margin.
Storing the hash_fn as a local variable seemed to speed things up
significantly
Tried moving the val searching out of the key search main loop and that
didn't slow things down to much. I had to add a way to store the
truncated hashes locally though.
I could try making whether a key slot is taken or not be in another array.
That way a byte could represent 8 slots, and you could check 64*8 slots
per cache line. Searching could use that memor too, but I'm not sure if
it would help or not.
Tried having searches search by bit, and that does not seem to help
